#pragma once

namespace MG
{
	class CmakeEmitter
	{
	public:
		explicit CmakeEmitter(const std::filesystem::path& path);

		// Adds the default "Generated by Magnet" text.
		void Add_Header();

		// Adds any text to the current stream.
		// Useful for adding custom CMake commands.
		// Does not add a newline character.
		void Add_Literal(const std::string& literal);

		// Adds a tab character to the current stream.
		void Add_Indentation(int amount = 1);

		// Adds a newline character to the current stream.
		void Add_Newline(int amount = 1);

		void Add_Comment(const std::string& comment);

		// Creates an if branch and executes the lambda if condition is met.
		// https://cmake.org/cmake/help/latest/command/if.html
		void Add_If(const std::string& condition, const std::function<void()>& lambda);

		// Creates an if/else branch and executes the lambda for each clause.
		// https://cmake.org/cmake/help/latest/command/if.html
		void Add_IfElse(const std::string& condition, const std::function<void()>& ifTrue,
		                const std::function<void()>& ifFalse);

		// https://cmake.org/cmake/help/latest/command/cmake_minimum_required.html
		void Add_CmakeMinimumRequired(const std::string& version);

		// https://cmake.org/cmake/help/latest/command/project.html
		void Add_Project(const std::string& target);

		// https://cmake.org/cmake/help/latest/prop_tgt/CXX_STANDARD.html
		void Add_SetCmakeCxxStandard(int value);

		// https://cmake.org/cmake/help/latest/prop_tgt/ARCHIVE_OUTPUT_DIRECTORY.html
		void Add_SetCmakeArchiveOutputDirectory(const std::string& value);

		// https://cmake.org/cmake/help/latest/prop_tgt/LIBRARY_OUTPUT_DIRECTORY.html
		void Add_SetCmakeLibraryOutputDirectory(const std::string& value);

		// https://cmake.org/cmake/help/latest/prop_tgt/RUNTIME_OUTPUT_DIRECTORY.html
		void Add_SetCmakeRuntimeOutputDirectory(const std::string& value);

		// https://cmake.org/cmake/help/latest/command/set_target_properties.html
		void Add_SetTargetProperties(const std::string& target, const std::string& property,
		                             const std::string& value);

		// https://cmake.org/cmake/help/latest/command/add_subdirectory.html
		void Add_AddSubdirectory(const std::string& source);

		// Same as above, but for multiple sources.
		// https://cmake.org/cmake/help/latest/command/add_subdirectory.html
		void Add_AddSubdirectory(const std::vector<std::string>& sources);

		// https://cmake.org/cmake/help/latest/command/target_include_directories.html
		void Add_TargetIncludeDirectories(const std::string& target, const std::string& mode,
		                                  const std::string& directory);

		// Begins a new target_include_directories block with full control over the directories pushed.
		void Begin_TargetIncludeDirectories(const std::string& target, const std::string& mode);

		// Ends the current target_include_directories block.
		void End_TargetIncludeDirectories();

		void Add_TargetLinkLibraries(const std::string& target, const std::vector<std::string>& libraries);

		// https://cmake.org/cmake/help/latest/command/add_executable.html
		void Add_AddExecutable(const std::string& target, const std::vector<std::string>& sources);

		// https://cmake.org/cmake/help/latest/command/add_library.html
		void Add_AddLibrary(const std::string& target, const std::string& type,
		                    const std::vector<std::string>& sources);


	private:
		// Returns a newline character.
		static char End();

		std::ofstream m_Stream;
	};
}